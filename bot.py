import asyncio
import aiohttp
import requests
import aiomysql
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import logging
from aiogram.client.bot import DefaultBotProperties
from config import Telegram_TOKEN, API, db_config
from aiogram.filters import CommandStart, Command

logging.basicConfig(level=logging.INFO)


bot = Bot(token=Telegram_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à—É–∫ –∑–∞ SN")],
        [KeyboardButton(text="–ü–æ—à—É–∫ –∑–∞ UID")]
    ],
    resize_keyboard=True
)

search_sn_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—à—É–∫—É SN")],
        [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")],
    ], 
    resize_keyboard=True
)

search_uid_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—à—É–∫—É UID")],
        [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")],
    ], 
    resize_keyboard=True
)

class Search(StatesGroup):
    sn = State()
    uid = State()

def fetch_data_by_sn(sn):
    url = f'{API}{sn}'
    try:
        response = requests.get(url)
        response.raise_for_status()  
        data = response.json()

        message_data = data.get("message")
        if not isinstance(message_data, dict):
            logging.error("–î–∞–Ω–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É")
            return None

        logging.info(f'–ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API: {data}')

        required_fields = ['type', 'status', 'wan',
                            'dist', 'rx', 'rxolt',
                            'tx', 'adminstatus',
                            'sn', 'inface']
        filtered_data = {
            key: message_data.get(key) for key in required_fields
        }

        olt_data = message_data.get('olt', {})
        filtered_data['name'] = olt_data.get('name')

        logging.info(f'–§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω–Ω—ñ: {filtered_data}')
        return filtered_data
    except requests.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–Ω–∏—Ö: {e}")
        return None

def safe_decode(text):
    try:
        if isinstance(text, str):
            return text.encode('latin1').decode('koi8-u')
        return text.decode('koi8-u') if isinstance(text, bytes) else text
    except (UnicodeDecodeError, UnicodeEncodeError) as e:
        logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è: {e}. –¢–µ–∫—Å—Ç –∑–∞–ª–∏—à–∏—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.")
        return text

async def fetch_mac_by_uid(uid):
    try:
        uid = int(uid)
        async with aiomysql.connect(**db_config) as connect:
            async with connect.cursor() as cursor:
                await cursor.execute("SELECT mac, user, fio, address FROM users WHERE uid = %s", (uid,))
                result = await cursor.fetchone()
                if result:
                    mac, user, fio, address = result
                    logging.info(f"UID: {uid}, MAC: {mac}, User: {user}, FIO: {fio}, Address: {address}")
                    return {
                        'mac': mac,
                        'user': user,
                        'fio': fio,
                        'address': address
                    }
                else:
                    logging.warning(f"UID {uid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ MAC –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                    return None
    except ValueError:
        logging.error(f"UID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º. –û—Ç—Ä–∏–º–∞–Ω–æ: {uid}")
        return None
    except Exception as error:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ UID {uid}: {error}")
        return None

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–æ—à—É–∫–∞:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == '–ü–æ—à—É–∫ –∑–∞ SN')
async def search_by_sn(message: types.Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 8 —Å–∏–º–≤–æ–ª—ñ–≤ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:')
    await state.set_state(Search.sn)

@dp.message(lambda message: message.text == '–ü–æ—à—É–∫ –∑–∞ UID')
async def search_by_uid(message: types.Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥—ñ—Ç—å UID:')
    await state.set_state(Search.uid)

@dp.message(Search.sn)
async def sn_input(message: types.Message, state: FSMContext):
    sn = message.text.strip()
    data = fetch_data_by_sn(sn)

    if data and isinstance(data, dict):
        result = (
            "```\n"
            f"Status:       {'working' if data.get('status') == 1 else 'not working'}\n"
            f"Type:         {data.get('type')}\n"
            f"WAN:          {data.get('wan')}\n"
            f"Dist:         {data.get('dist')}\n"
            f"RX:           {data.get('rx')}\n"
            f"RXOLT:        {data.get('rxolt')}\n"
            f"TX:           {data.get('tx')}\n"
            f"Adminstatus:  {data.get('adminstatus')}\n"
            f"SN:           {data.get('sn')}\n"
            f"Inface:       {data.get('inface')}\n"
            f"Name:         {data.get('name')}\n"
            "```"
        )
    else:
        result = "üî¥ –ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    
    await message.reply(result, parse_mode=ParseMode.MARKDOWN, reply_markup=search_sn_keyboard)
    await state.clear()


@dp.message(Search.uid)
async def search_uid(message: types.Message, state: FSMContext):
    uid = message.text.strip()
    if not uid.isdigit():
        await message.reply("UID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.", reply_markup=search_uid_keyboard)
        return
    logging.info(f'User input UID: {uid}')
    user_data = await fetch_mac_by_uid(uid)

    if user_data:
        mac = user_data['mac']
        fio = safe_decode(user_data['fio'])
        user = safe_decode(user_data['user'])
        address = safe_decode(user_data['address'])
        use_mac = mac[-8:]   
        logging.info(f"MAC –¥–ª—è UID {uid}: {mac}")

        try:
            api_data = fetch_data_by_sn(use_mac)
            logging.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API –¥–ª—è MAC {use_mac}: {api_data}")
            if api_data and isinstance(api_data, dict):
                result = (
                    "```\n"
                    f"UID:          {uid}\n"
                    f"User:         {fio}\n"
                    f"FIO:          {user}\n"
                    f"Address:      {address}\n"
                    f"MAC Address:  {mac}\n"
                    f"Status:       {'working' if api_data.get('status') == 1 else 'not working'}\n"
                    f"Type:         {api_data.get('type')}\n"
                    f"WAN:          {api_data.get('wan')}\n"
                    f"Dist:         {api_data.get('dist')}\n"
                    f"RX:           {api_data.get('rx')}\n"
                    f"RXOLT:        {api_data.get('rxolt')}\n"
                    f"TX:           {api_data.get('tx')}\n"
                    f"Adminstatus:  {api_data.get('adminstatus')}\n"
                    f"SN:           {api_data.get('sn')}\n"
                    f"Inface:       {api_data.get('inface')}\n"
                    f"Name:         {api_data.get('name')}\n"
                    "```"
                )
            else:
                result = "üî¥ –ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ UID. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        except Exception as error:
            result = f"üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {error}"
    else:
        result = "üî¥ –ü–æ–º–∏–ª–∫–∞: UID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É."
    
    await message.reply(result, parse_mode=ParseMode.MARKDOWN, reply_markup=search_uid_keyboard)
    await state.clear()

@dp.message(lambda message: message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—à—É–∫—É SN')
async def return_to_search_sn(message: types.Message, state:FSMContext):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 8 —Å–∏–º–≤–æ–ª—ñ–≤ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:", reply_markup=main_keyboard)
    await state.set_state(Search.sn)

@dp.message(lambda message: message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—à—É–∫—É UID')
async def return_to_search_uid(message: types.Message, state:FSMContext):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å UID:", reply_markup=main_keyboard)
    await state.set_state(Search.uid)

@dp.message(lambda message: message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é')
async def return_to_main(message: types.Message):
    await message.reply('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–æ—à—É–∫—É:', reply_markup=main_keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())